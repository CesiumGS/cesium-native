// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#pragma once

#include "PropertyTablePropertyJsonHandler.h"
#include <CesiumGltf/PropertyTable.h>
#include <CesiumJsonReader/DictionaryJsonHandler.h>
#include <CesiumJsonReader/ExtensibleObjectJsonHandler.h>
#include <CesiumJsonReader/IntegerJsonHandler.h>
#include <CesiumJsonReader/StringJsonHandler.h>

namespace CesiumJsonReader {
  class JsonReaderOptions;
} // namespace CesiumJsonReader

namespace CesiumGltfReader {
  class PropertyTableJsonHandler : public CesiumJsonReader::ExtensibleObjectJsonHandler {
  public:
    using ValueType = CesiumGltf::PropertyTable;

    explicit PropertyTableJsonHandler(const CesiumJsonReader::JsonReaderOptions& options) noexcept;
    void reset(IJsonHandler* pParentHandler, CesiumGltf::PropertyTable* pObject);

    IJsonHandler* readObjectKey(const std::string_view& str) override;

  protected:
    IJsonHandler* readObjectKeyPropertyTable(const std::string& objectType, const std::string_view& str, CesiumGltf::PropertyTable& o);

  private:

    CesiumGltf::PropertyTable* _pObject = nullptr;
    CesiumJsonReader::StringJsonHandler _name;
    CesiumJsonReader::StringJsonHandler _classProperty;
    CesiumJsonReader::IntegerJsonHandler<int64_t> _count;
    CesiumJsonReader::DictionaryJsonHandler<CesiumGltf::PropertyTableProperty, PropertyTablePropertyJsonHandler> _properties;
  };
}  // namespace CesiumGltfReader
