diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8a92969..f1edcd7 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -10,7 +10,7 @@ include(GNUInstallDirs)
 option(BUILD_SHARED_LIBS "Build using shared libraries" ON)
 
 # zlib is required to build the project
-find_package(ZLIB REQUIRED)
+find_package(zlib-ng REQUIRED)
 
 set(spz_sources
   "${CMAKE_CURRENT_SOURCE_DIR}/src/cc/load-spz.cc"
@@ -28,7 +28,7 @@ set(spz_headers
 add_library(spz ${spz_sources})
 add_library(spz::spz ALIAS spz)
 
-target_link_libraries(spz PRIVATE ZLIB::ZLIB)
+target_link_libraries(spz PRIVATE zlib-ng)
 
 target_include_directories(spz
   PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/cc>
diff --git a/src/cc/load-spz.cc b/src/cc/load-spz.cc
index 7388d56..a1f5ffe 100644
--- a/src/cc/load-spz.cc
+++ b/src/cc/load-spz.cc
@@ -1,6 +1,6 @@
 #include "load-spz.h"
 
-#include <zlib.h>
+#include <zlib-ng.h>
 
 #ifdef ANDROID
 #include <android/log.h>
@@ -141,10 +141,10 @@ struct PackedGaussiansHeader {
 bool decompressGzippedImpl(
   const uint8_t *compressed, size_t size, int32_t windowSize, std::vector<uint8_t> *out) {
   std::vector<uint8_t> buffer(8192);
-  z_stream stream = {};
+  zng_stream stream = {};
   stream.next_in = const_cast<Bytef *>(compressed);
   stream.avail_in = size;
-  if (inflateInit2(&stream, windowSize) != Z_OK) {
+  if (zng_inflateInit2(&stream, windowSize) != Z_OK) {
     return false;
   }
   out->clear();
@@ -152,7 +152,7 @@ bool decompressGzippedImpl(
   while (true) {
     stream.next_out = buffer.data();
     stream.avail_out = buffer.size();
-    int32_t res = inflate(&stream, Z_NO_FLUSH);
+    int32_t res = zng_inflate(&stream, Z_NO_FLUSH);
     if (res != Z_OK && res != Z_STREAM_END) {
       break;
     }
@@ -162,7 +162,7 @@ bool decompressGzippedImpl(
       break;
     }
   }
-  inflateEnd(&stream);
+  zng_inflateEnd(&stream);
   return success;
 }
 
@@ -185,9 +185,9 @@ bool decompressGzipped(const uint8_t *compressed, size_t size, std::string *out)
 
 bool compressGzipped(const uint8_t *data, size_t size, std::vector<uint8_t> *out) {
   std::vector<uint8_t> buffer(8192);
-  z_stream stream = {};
+  zng_stream stream = {};
   if (
-    deflateInit2(&stream, Z_DEFAULT_COMPRESSION, Z_DEFLATED, 16 + MAX_WBITS, 9, Z_DEFAULT_STRATEGY)
+    zng_deflateInit2(&stream, Z_DEFAULT_COMPRESSION, Z_DEFLATED, 16 + MAX_WBITS, 9, Z_DEFAULT_STRATEGY)
     != Z_OK) {
     return false;
   }
@@ -199,7 +199,7 @@ bool compressGzipped(const uint8_t *data, size_t size, std::vector<uint8_t> *out
   while (true) {
     stream.next_out = buffer.data();
     stream.avail_out = buffer.size();
-    int32_t res = deflate(&stream, Z_FINISH);
+    int32_t res = zng_deflate(&stream, Z_FINISH);
     if (res != Z_OK && res != Z_STREAM_END) {
       break;
     }
@@ -209,7 +209,7 @@ bool compressGzipped(const uint8_t *data, size_t size, std::vector<uint8_t> *out
       break;
     }
   }
-  deflateEnd(&stream);
+  zng_deflateEnd(&stream);
   return success;
 }
 
