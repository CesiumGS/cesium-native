// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#pragma once

#include <Cesium3DTiles/Library.h>
#include <Cesium3DTiles/PropertyTable.h>
#include <Cesium3DTiles/VoxelBuffer.h>
#include <Cesium3DTiles/VoxelBufferView.h>
#include <CesiumUtility/ExtensibleObject.h>

#include <cstdint>
#include <vector>

namespace Cesium3DTiles {
/**
 * @brief An object describing where voxel property values are stored.
 */
struct CESIUM3DTILES_API VoxelContent final
    : public CesiumUtility::ExtensibleObject {
  /**
   * @brief The original name of this type.
   */
  static constexpr const char* TypeName = "VoxelContent";

  /**
   * @brief An array of buffers.
   */
  std::vector<Cesium3DTiles::VoxelBuffer> buffers;

  /**
   * @brief An array of buffer views.
   */
  std::vector<Cesium3DTiles::VoxelBufferView> bufferViews;

  /**
   * @brief An array of property tables.
   */
  std::vector<Cesium3DTiles::PropertyTable> propertyTables;

  /**
   * @brief Index of the property table containing voxel data.
   */
  int64_t voxelTable = int64_t();

  /**
   * @brief Calculates the size in bytes of this object, including the contents
   * of all collections, pointers, and strings. This will NOT include the size
   * of any extensions attached to the object. Calling this method may be slow
   * as it requires traversing the object's entire structure.
   */
  int64_t getSizeBytes() const {
    int64_t accum = 0;
    accum += int64_t(sizeof(VoxelContent));
    accum += CesiumUtility::ExtensibleObject::getSizeBytes() -
             int64_t(sizeof(CesiumUtility::ExtensibleObject));
    accum +=
        int64_t(sizeof(Cesium3DTiles::VoxelBuffer) * this->buffers.capacity());
    for (const Cesium3DTiles::VoxelBuffer& value : this->buffers) {
      accum +=
          value.getSizeBytes() - int64_t(sizeof(Cesium3DTiles::VoxelBuffer));
    }
    accum += int64_t(
        sizeof(Cesium3DTiles::VoxelBufferView) * this->bufferViews.capacity());
    for (const Cesium3DTiles::VoxelBufferView& value : this->bufferViews) {
      accum += value.getSizeBytes() -
               int64_t(sizeof(Cesium3DTiles::VoxelBufferView));
    }
    accum += int64_t(
        sizeof(Cesium3DTiles::PropertyTable) * this->propertyTables.capacity());
    for (const Cesium3DTiles::PropertyTable& value : this->propertyTables) {
      accum +=
          value.getSizeBytes() - int64_t(sizeof(Cesium3DTiles::PropertyTable));
    }
    return accum;
  }
};
} // namespace Cesium3DTiles
