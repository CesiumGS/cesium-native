// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#pragma once

#include <CesiumGltf/FeatureId.h>
#include <CesiumGltf/Library.h>
#include <CesiumUtility/ExtensibleObject.h>
#include <vector>

namespace CesiumGltf {
    /**
     * @brief An object describing feature IDs for a mesh primitive.
     */
    struct CESIUMGLTF_API ExtensionExtMeshFeatures final : public CesiumUtility::ExtensibleObject {
        static constexpr const char* TypeName = "ExtensionExtMeshFeatures";
        static constexpr const char* ExtensionName = "EXT_mesh_features";

        /**
         * @brief An array of feature ID sets.
         */
        std::vector<CesiumGltf::FeatureId> featureIds;

        /**
         * @brief Calculates the size in bytes of this object, including the contents of all collections, pointers, and strings.
         * This will NOT include the size of any extensions attached to the object.
         * Calling this method may be slow as it requires traversing the object's entire structure.
         */
        int64_t getSizeBytes() const {
          int64_t accum = 0;
          accum += int64_t(sizeof(ExtensionExtMeshFeatures));
          accum += CesiumUtility::ExtensibleObject::getSizeBytes() - int64_t(sizeof(CesiumUtility::ExtensibleObject));
          accum += int64_t(sizeof(CesiumGltf::FeatureId) * this->featureIds.capacity());
      for(const CesiumGltf::FeatureId& value : this->featureIds) {
accum += value.getSizeBytes() - int64_t(sizeof(CesiumGltf::FeatureId));
      }
          return accum;
        }

    };
} // namespace CesiumGltf
