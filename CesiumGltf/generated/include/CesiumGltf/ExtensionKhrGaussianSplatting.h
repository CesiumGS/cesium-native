// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#pragma once

#include <CesiumGltf/ExtensionKhrGaussianSplattingHintsValue.h>
#include <CesiumGltf/Library.h>
#include <CesiumUtility/ExtensibleObject.h>

#include <optional>
#include <string>

namespace CesiumGltf {
/**
 * @brief Data for a 3D Gaussian Splat primitive.
 */
struct CESIUMGLTF_API ExtensionKhrGaussianSplatting final
    : public CesiumUtility::ExtensibleObject {
  /**
   * @brief The original name of this type.
   */
  static constexpr const char* TypeName = "ExtensionKhrGaussianSplatting";
  /** @brief The official name of the extension. This should be the same as its
   * key in the `extensions` object. */
  static constexpr const char* ExtensionName = "KHR_gaussian_splatting";

  /**
   * @brief The shape of the Gaussian to render. Gaussians may be available in
   * different shapes, so this is a freeform field that defaults to ellipsoid.
   * See the extension specification for futher known types.
   */
  std::string shape = "ellipsoid";

  /**
   * @brief Optional rendering hints for rendering the 3D Gaussian splats.
   * Renderers are free to ignore any of these.
   */
  std::optional<CesiumGltf::ExtensionKhrGaussianSplattingHintsValue> hints;

  /**
   * @brief Calculates the size in bytes of this object, including the contents
   * of all collections, pointers, and strings. This will NOT include the size
   * of any extensions attached to the object. Calling this method may be slow
   * as it requires traversing the object's entire structure.
   */
  int64_t getSizeBytes() const {
    int64_t accum = 0;
    accum += int64_t(sizeof(ExtensionKhrGaussianSplatting));
    accum += CesiumUtility::ExtensibleObject::getSizeBytes() -
             int64_t(sizeof(CesiumUtility::ExtensibleObject));
    accum += int64_t(this->shape.capacity() * sizeof(char));
    if (this->hints) {
      accum +=
          this->hints->getSizeBytes() -
          int64_t(sizeof(CesiumGltf::ExtensionKhrGaussianSplattingHintsValue));
    }
    return accum;
  }
};
} // namespace CesiumGltf
