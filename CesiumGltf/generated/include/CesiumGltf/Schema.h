// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#pragma once

#include "CesiumGltf/Class.h"
#include "CesiumGltf/Enum.h"
#include "CesiumGltf/Library.h"

#include <CesiumUtility/SharedAsset.h>

#include <optional>
#include <string>
#include <unordered_map>

namespace CesiumGltf {
/**
 * @brief An object defining classes and enums.
 */
struct CESIUMGLTF_API Schema final : public CesiumUtility::SharedAsset<Schema> {
  static inline constexpr const char* TypeName = "Schema";

  /**
   * @brief Unique identifier for the schema. Schema IDs must be alphanumeric
   * identifiers matching the regular expression `^[a-zA-Z_][a-zA-Z0-9_]*$`.
   */
  std::string id;

  /**
   * @brief The name of the schema, e.g. for display purposes.
   */
  std::optional<std::string> name;

  /**
   * @brief The description of the schema.
   */
  std::optional<std::string> description;

  /**
   * @brief Application-specific version of the schema.
   */
  std::optional<std::string> version;

  /**
   * @brief A dictionary, where each key is a class ID and each value is an
   * object defining the class. Class IDs must be alphanumeric identifiers
   * matching the regular expression `^[a-zA-Z_][a-zA-Z0-9_]*$`.
   */
  std::unordered_map<std::string, CesiumGltf::Class> classes;

  /**
   * @brief A dictionary, where each key is an enum ID and each value is an
   * object defining the values for the enum. Enum IDs must be alphanumeric
   * identifiers matching the regular expression `^[a-zA-Z_][a-zA-Z0-9_]*$`.
   */
  std::unordered_map<std::string, CesiumGltf::Enum> enums;

  int64_t getSizeBytes() const {
    int64_t accum = 0;
    accum += sizeof(Schema);
    accum += this->id.size();
    if (this->name) {
      accum += this->name->size();
    }
    if (this->description) {
      accum += this->description->size();
    }
    if (this->version) {
      accum += this->version->size();
    }
    for (auto& [k, v] : this->classes) {
      accum += k.size();
      accum += v.getSizeBytes() - sizeof(CesiumGltf::Class);
    }
    for (auto& [k, v] : this->enums) {
      accum += k.size();
      accum += v.getSizeBytes() - sizeof(CesiumGltf::Enum);
    }
    return accum;
  }
};
} // namespace CesiumGltf
