// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#pragma once

#include <CesiumGltf/Library.h>
#include <CesiumUtility/ExtensibleObject.h>

#include <cstdint>

namespace CesiumGltf {
/**
 * @brief Allows entities in a property table to have parent entities,
 * establishing a metadata hierarchy. A parent entity is specified by a property
 * table index and an element index within the property table. If the property
 * table index and element index are the same as the current entity's, then the
 * entity does not have a parent. Circular references are not allowed.
 */
struct CESIUMGLTF_API ExtensionPropertyTableExtStructuralMetadataHierarchy final
    : public CesiumUtility::ExtensibleObject {
  /**
   * @brief The original name of this type.
   */
  static constexpr const char* TypeName =
      "ExtensionPropertyTableExtStructuralMetadataHierarchy";
  /** @brief The official name of the extension. This should be the same as its
   * key in the `extensions` object. */
  static constexpr const char* ExtensionName =
      "EXT_structural_metadata_hierarchy";

  /**
   * @brief The index of the accessor containing property table indices.
   */
  int32_t parentPropertyTables = -1;

  /**
   * @brief The index of the accessor containing element indices.
   */
  int32_t parentIndices = -1;

  /**
   * @brief Calculates the size in bytes of this object, including the contents
   * of all collections, pointers, and strings. This will NOT include the size
   * of any extensions attached to the object. Calling this method may be slow
   * as it requires traversing the object's entire structure.
   */
  int64_t getSizeBytes() const {
    int64_t accum = 0;
    accum +=
        int64_t(sizeof(ExtensionPropertyTableExtStructuralMetadataHierarchy));
    accum += CesiumUtility::ExtensibleObject::getSizeBytes() -
             int64_t(sizeof(CesiumUtility::ExtensibleObject));

    return accum;
  }
};
} // namespace CesiumGltf
