// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#pragma once

#include "CesiumGltf/Library.h"
#include "CesiumGltf/PropertyTextureProperty.h"

#include <CesiumUtility/ExtensibleObject.h>

#include <optional>
#include <string>
#include <unordered_map>

namespace CesiumGltf {
/**
 * @brief Properties conforming to a class, organized as property values stored
 * in textures.
 */
struct CESIUMGLTF_API PropertyTexture final
    : public CesiumUtility::ExtensibleObject {
  static inline constexpr const char* TypeName = "PropertyTexture";

  /**
   * @brief The name of the property texture, e.g. for display purposes.
   */
  std::optional<std::string> name;

  /**
   * @brief The class that property values conform to. The value must be a class
   * ID declared in the `classes` dictionary.
   */
  std::string classProperty;

  /**
   * @brief A dictionary, where each key corresponds to a property ID in the
   * class' `properties` dictionary and each value is an object describing where
   * property values are stored. Required properties must be included in this
   * dictionary.
   */
  std::unordered_map<std::string, CesiumGltf::PropertyTextureProperty>
      properties;

  int64_t getSizeBytes() const {
    int64_t accum = 0;
    accum += sizeof(PropertyTexture);
    if (this->name) {
      accum += this->name->size();
    }
    accum += this->classProperty.size();
    for (auto& [k, v] : this->properties) {
      accum += k.size();
      accum += v.getSizeBytes() - sizeof(CesiumGltf::PropertyTextureProperty);
    }
    return accum;
  }
};
} // namespace CesiumGltf
