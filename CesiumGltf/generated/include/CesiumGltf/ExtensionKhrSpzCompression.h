// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#pragma once

#include "CesiumGltf/Library.h"
#include <CesiumUtility/ExtensibleObject.h>
#include <cstdint>
#include <optional>
#include <unordered_map>

namespace CesiumGltf {
    /**
     * @brief Compressed data for SPZ primitive.
     */
    struct CESIUMGLTF_API ExtensionKhrSpzCompression final : public CesiumUtility::ExtensibleObject {
        static inline constexpr const char* TypeName = "ExtensionKhrSpzCompression";
        static inline constexpr const char* ExtensionName = "KHR_spz_compression";

        /**
         * @brief The index of the bufferView.
         */
        int32_t bufferView = -1;

        /**
         * @brief The number of gaussians.
         */
        std::optional<int64_t> numPoints;

        /**
         * @brief The degree of the spherical harmonics.
         */
        std::optional<int64_t> shDegree;

        /**
         * @brief The number of fractional bits.
         */
        std::optional<int64_t> fractionalBits;

        /**
         * @brief The flags for the compressed data.
         */
        std::optional<int64_t> flags;

        /**
         * @brief The version of the SPZ algorithm
         */
        std::optional<int64_t> version;

        /**
         * @brief A dictionary object, where each key corresponds to an attribute and its unique attribute id stored in the compressed geometry.
         */
        std::unordered_map<std::string, int32_t> attributes;

    };
}
