// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#pragma once

#include <CesiumGltf/Library.h>
#include <CesiumUtility/ExtensibleObject.h>

#include <string>

namespace CesiumGltf {
/**
 * @brief Optional rendering hints for rendering the 3D Gaussian splats.
 * Renderers are free to ignore any of these.
 */
struct CESIUMGLTF_API ExtensionKhrGaussianSplattingHintsValue final
    : public CesiumUtility::ExtensibleObject {
  /**
   * @brief The original name of this type.
   */
  static constexpr const char* TypeName =
      "ExtensionKhrGaussianSplattingHintsValue";

  /**
   * @brief Provides a hint specifying how to project the Gaussians to achieve a
   * perspective correct value. This is a freeform field that defaults to
   * perspective. See the extension specification for further known types.
   */
  std::string projection = "perspective";

  /**
   * @brief Provides a hint specifying how to sort the Gaussians during
   * rendering. This is a freeform field defaulting to cameraDistance. See the
   * extension specification for further known types.
   */
  std::string sortingMethod = "cameraDistance";

  /**
   * @brief Calculates the size in bytes of this object, including the contents
   * of all collections, pointers, and strings. This will NOT include the size
   * of any extensions attached to the object. Calling this method may be slow
   * as it requires traversing the object's entire structure.
   */
  int64_t getSizeBytes() const {
    int64_t accum = 0;
    accum += int64_t(sizeof(ExtensionKhrGaussianSplattingHintsValue));
    accum += CesiumUtility::ExtensibleObject::getSizeBytes() -
             int64_t(sizeof(CesiumUtility::ExtensibleObject));
    accum += int64_t(this->projection.capacity() * sizeof(char));
    accum += int64_t(this->sortingMethod.capacity() * sizeof(char));
    return accum;
  }
};
} // namespace CesiumGltf
