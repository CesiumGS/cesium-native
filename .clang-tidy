---
Checks:
  - "-*"
  - "misc-include-cleaner"
  - "bugprone-argument-comment"
  - "bugprone-assert-side-effect"
  - "bugprone-assignment-in-if-condition"
  - "bugprone-bad-signal-to-kill-thread"
  - "bugprone-bool-pointer-implicit-conversion"
  - "bugprone-branch-clone"
  - "bugprone-casting-through-void"
  - "bugprone-chained-comparison"
  - "bugprone-compare-pointer-to-member-virtual-function"
  - "bugprone-copy-constructor-init"
  - "bugprone-crtp-constructor-accessibility"
  - "bugprone-dangling-handle"
  - "bugprone-dynamic-static-initializers"
  - "-bugprone-easily-swappable-parameters"
  - "bugprone-empty-catch"
  # See https://github.com/CesiumGS/cesium-native/issues/348
  #- "bugprone-exception-escape" 
  - "bugprone-fold-init-type"
  - "bugprone-forward-declaration-namespace"
  - "bugprone-forwarding-reference-overload"
  - "bugprone-implicit-widening-of-multiplication-result"
  - "bugprone-inaccurate-erase"
  - "bugprone-inc-dec-in-conditions"
  - "bugprone-incorrect-enable-if"
  - "bugprone-incorrect-roundings"
  - "bugprone-infinite-loop"
  - "bugprone-unhandled-self-assignment"
  - "bugprone-unchecked-optional-access"

  - "bugprone-integer-division"
  - "bugprone-lambda-function-name"
  - "bugprone-macro-parentheses"
  - "bugprone-macro-repeated-side-effects"
  - "bugprone-misplaced-operator-in-strlen-in-alloc"
  - "bugprone-misplaced-pointer-arithmetic-in-alloc"
  # Produces a lot of results that are just extra-verbose - skipping for now
  #- "bugprone-misplaced-widening-cast"
  - "bugprone-move-forwarding-reference"
  - "bugprone-multi-level-implicit-pointer-conversion"
  - "bugprone-multiple-new-in-one-expression"
  - "bugprone-multiple-statement-macro"
  - "bugprone-no-escape"
  - "bugprone-non-zero-enum-to-bool-conversion"
  - "bugprone-not-null-terminated-result"
  - "bugprone-optional-value-conversion"
  - "bugprone-parent-virtual-call"
  - "bugprone-pointer-arithmetic-on-polymorphic-object"
  - "bugprone-posix-return"
  - "bugprone-redundant-branch-condition"
  - "bugprone-reserved-identifier"
  - "bugprone-return-const-ref-from-parameter"
  - "bugprone-shared-ptr-array-mismatch"
  - "bugprone-signal-handler"
  - "bugprone-sizeof-container"
  - "bugprone-sizeof-expression"
  - "bugprone-spuriously-wake-up-functions"
  - "bugprone-standalone-empty"
  - "bugprone-string-constructor"
  - "bugprone-string-integer-assignment"
  - "bugprone-string-literal-with-embedded-nul"
  - "bugprone-stringview-nullptr"
  - "bugprone-suspicious-enum-usage"
  - "bugprone-suspicious-include"
  - "bugprone-suspicious-memory-comparison"
  - "bugprone-suspicious-memset-usage"
  - "bugprone-suspicious-missing-comma"
  - "bugprone-suspicious-realloc-usage"
  - "bugprone-suspicious-semicolon"
  - "bugprone-suspicious-string-compare"
  - "bugprone-suspicious-stringview-data-usage"
  - "bugprone-swapped-arguments"
  - "bugprone-terminating-continue"
  - "bugprone-throw-keyword-missing"
  - "bugprone-too-small-loop-variable"
  - "bugprone-undefined-memory-manipulation"
  - "bugprone-undelegated-constructor"
  #- "bugprone-unhandled-exception-at-new"
  - "bugprone-unique-ptr-array-mismatch"
  - "bugprone-unsafe-functions"
  - "bugprone-unused-local-non-trivial-variable"
  - "bugprone-unused-raii"
  - "bugprone-unused-return-value"
  - "bugprone-use-after-move"
  - "bugprone-virtual-near-miss"
  - "cppcoreguidelines-avoid-capturing-lambda-coroutines"
  - "cppcoreguidelines-avoid-goto"
  - "cppcoreguidelines-avoid-reference-coroutine-parameters"
  - "cppcoreguidelines-interfaces-global-init"
  - "cppcoreguidelines-misleading-capture-default-by-value"
  - "cppcoreguidelines-no-suspend-with-lock"
  - "cppcoreguidelines-prefer-member-initializer"
  - "cppcoreguidelines-pro-type-cstyle-cast"
  - "cppcoreguidelines-pro-type-static-cast-downcast"
  - "cppcoreguidelines-pro-type-union-access"
  - "cppcoreguidelines-slicing"
  - "google-runtime-int"
  # We should enable this one at some point, but it produces a huge number of changes
  # - "misc-const-correctness"
  - "misc-misleading-bidrectional"
  - "misc-misleading-identifier"
  - "misc-misplaced-const"
  - "misc-non-copyable-objects"
  - "misc-redundant-expression"
  - "misc-unused-parameters"
  - "misc-unused-using-decls"
  - "misc-use-anonymous-namespace"
  - "misc-use-internal-linkage"
  - "modernize-deprecated-headers"
  #- "modernize-loop-convert"
  - "modernize-make-shared"
  - "modernize-make-unique"
  - "modernize-min-max-use-initializer-list"
  - "modernize-raw-string-literal"
  - "modernize-redundant-void-arg"
  - "modernize-replace-auto-ptr"
  #- "modernize-type-traits"
  #- "modernize-use-constraints"
  - "modernize-use-emplace"
  - "modernize-use-equals-default"
  - "modernize-use-equals-delete"
  - "modernize-use-nullptr"
  - "modernize-use-starts-ends-with"
  # The <numbers> header is unfortunately not available in Android NDK r25b,
  # which is an important target for cesium-native via Unreal Engine.
  #- "modernize-use-std-numbers"
  #- "modernize-use-using"
  - "performance-*"
  - "-performance-enum-size"
  - "-readability-redundant-member-init"

WarningsAsErrors: "*"
FormatStyle: none
CheckOptions:
  - key: readability-implicit-bool-conversion.AllowPointerConditions
    value: "true"
  - key: cppcoreguidelines-rvalue-reference-param-not-moved.AllowPartialMove
    value: "true"
  - key: modernize-use-auto.RemoveStars
    value: "true"
  - key: misc-include-cleaner.IgnoreHeaders
    value: ".*cesium-async\\+\\+\\.h;.*bits\/.*.h"
  - key: performance-move-const-arg.CheckTriviallyCopyableMove
    value: "false"
HeaderFilterRegex: ".*"
HeaderFileExtensions: ["h"]
ExcludeHeaderFilterRegex: ".*\\.ezvcpkg\/.*"
ImplementationFileExtensions: ["cpp"]